<?xml version="1.0" encoding="UTF-8"?>
<project default="all" name="jinks">
    <xmlproperty file="expath-pkg.xml" />
    <property name="project.version" value="${package(version)}" />
    <property name="project.app" value="${package(abbrev)}" />
    <property name="build.dir" value="build" />
    <property name="app.build.dir" value="${build.dir}/${project.app}-${project.version}" />
    <property name="git.repo.path" value="${basedir}/.git" />
    <available file="${git.repo.path}" type="dir" property="git.present" />    
    
    <!-- no clean -->
    <target name="all" depends="xar" />

    <target name="rebuild" depends="clean,all" />

    <target name="clean">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}" includes="**/*" />
        </delete>
    </target>

    <target name="prepare">
        <mkdir dir="${app.build.dir}" />
        <copy todir="${app.build.dir}">
            <fileset dir="${basedir}"
                excludes="${build.dir}/**,build.xml,README.md,.*,repo.xml.tmpl,node_modules/**,package*.json,local.node-exist.json,gulpfile.js,.devcontainer,.idea/**" />
        </copy>
        <copy todir="${app.build.dir}" overwrite="true" verbose="true">
            <fileset file="*.xml.tmpl" />
            <filterchain>
                <replacetokens>
                    <token key="name" value="${app.name}" />
                    <token key="version" value="${app.version}" />
                    <token key="url" value="${app.url}" />
                    <token key="title" value="${app.title}" />
                    <token key="commit-id" value="${commit-id}" />
                    <token key="commit-time" value="${commit-time}" />
                </replacetokens>
                <tokenfilter>
                    <!-- until we move template processing to XSLT, take care with special
                    characters -->
                    <replacestring from="&amp;" to="&amp;amp;" />
                </tokenfilter>
            </filterchain>
            <globmapper from="*.tmpl" to="*" />
        </copy>
    </target>

    <target name="xar" depends="git.revision,prepare">
        <zip basedir="${app.build.dir}"
            destfile="${build.dir}/${project.app}-${project.version}.xar" />
    </target>

    <target name="git.revision" description="Store git revision in ${commit-id}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="rev-parse" />
            <arg value="HEAD" />
        </exec>
        <condition property="commit-id" value="${git.revision}" else="">
            <and>
                <isset property="git.revision" />
                <length string="${git.revision}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit id: ${commit-id}</echo>
        <exec executable="git" outputproperty="git.time" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="show" />
            <arg value="-s" />
            <arg value="--format=%ct" />
            <arg value="${git.revision}" />
        </exec>

        <condition property="commit-time" value="${git.time}" else="">
            <and>
                <isset property="git.time" />
                <length string="${git.time}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit time: ${commit-time}</echo>
    </target>
</project>