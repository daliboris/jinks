<tei:TEI xmlns:pb="http://teipublisher.com/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader xmlns="http://www.tei-c.org/ns/1.0">
        <fileDesc>
            <titleStmt>
                <title>Serafin Letters


                 
                 
                 
                 
                 
                 
                  
                 
                  
                 
                  
                 
                 
                 
                  
                 
                 
                 <desc>15th c. manuscript correspondence with parallel translation</desc>
                </title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <pb:behaviour ident="glossary" output="latex">
                    <pb:param name="id" value="@xml:id"/>
                    <pb:param name="name"/>
                    <pb:param name="note"/>
                    <pb:template xmlns="" xml:space="preserve">\newglossaryentry{[[id]]} {
                        name=[[name]],
                        description={[[note]]}
                    }</pb:template>
                </pb:behaviour>
                <rendition source="serafin.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2018-08-31+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text xmlns="http://www.tei-c.org/ns/1.0">
        <body>
            <schemaSpec start="TEI teiCorpus" ident="serafin" source="teipublisher.odd">
                <elementSpec ident="TEI" mode="change">
                    <model predicate="$parameters?mode='metadata'" behaviour="pass-through">
            <param name="content" value="root(.)//correspContext"/>
        </model>
                    <model output="latex" behaviour="section">
            <param name="header" value="teiHeader"/>
            <param name="title" value="teiHeader/fileDesc/titleStmt/title/node()"/>
            <param name="content" value=".//text[@type='source']/body"/>
            <param name="translation" value=".//text[@xml:lang='pl']"/>
            <param name="glossary" value="(teiHeader//particDesc/listPerson/person, teiHeader//settingDesc/listPlace/place)"/>
            <param name="styles" value="$config('latex-styles')"/>
            <pb:template xmlns="" xml:space="preserve">\documentclass[10pt,a4paper,twoside]{article}

\usepackage[latin,polish]{babel}
\usepackage{reledmac}
\usepackage{reledpar}
\usepackage{hyperref}
\usepackage{glossaries}
\makenoidxglossaries

\usepackage{fancyhdr,extramarks,xifthen}
\pagestyle{fancy}

\fancyhf{}
\fancyhead[LO,RE]{\footnotesize\volume}
\fancyhead[LE,RO]{\footnotesize\thepage}

[[styles]]

[[glossary]]

\begin{document}

\setlength{\columnrulewidth}{0.2pt}
\setlength{\Lcolwidth}{0.425\textwidth}
\setlength{\Rcolwidth}{0.425\textwidth}
\columnsposition{C}
\numberlinefalse

[[header]]

\begin{pairs}

\begin{Leftside}
\beginnumbering
\selectlanguage{latin}
[[content]]
\endnumbering
\end{Leftside}

\begin{Rightside}
\beginnumbering
\selectlanguage{polish}
[[translation]]
\endnumbering
\end{Rightside}

\end{pairs}

\Columns

\printnoidxglossaries

\end{document}</pb:template>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model output="latex" behaviour="paragraph"/>
                    <model behaviour="paragraph" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="omit" useSourceRendition="true"/>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                    <model behaviour="note">
            <param name="content" value="let $target := '#' || @xml:id return root(.)//listAnnotation/note[@target=$target]"/>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="ancestor::correspContext" behaviour="inline">
            <param name="content" value="id(@key, collection($global:register-root)/id('pb-persons'))/persName[@type='main']/text()"/>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="id" value="@key"/>
            <pb:template xmlns="" xml:space="preserve">\glslink{[[id]]}{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: #1565c0;
            </outputRendition>
        </model>
                    <model predicate="$parameters?mode='register'" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="alternate" value="parent::person/note"/>
            <param name="uri" value="$parameters?context-path || '/people/' || parent::person/@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" class="persName">
  <pb-popover>
    <span slot="default">[[content]]</span>
    <template slot="alternate">[[alternate]]</template>
  </pb-popover>
</a></pb:template>
        </model>
                    <model predicate="@type='variant'" behaviour="inline" cssClass="name variant"/>
                    <model predicate="parent::person" behaviour="inline">
            <outputRendition xml:space="preserve" scope="after">
            content: ': ';
            </outputRendition>
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="alternate" cssClass="persName">
            <param name="default" value="."/>
            <param name="alternate" value="id(@key, collection($global:register-root)/id('pb-persons'))"/>
        </model>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <model output="latex" behaviour="glossary">
            <param name="name" value="persName/text()"/>
            <param name="note" value="note"/>
        </model>
                    <model predicate="parent::listPerson and $parameters?mode='register'" behaviour="listItem">
            <param name="content" value="persName[@type='main']"/>
        </model>
                    <modelSequence predicate="parent::listPerson">
            <model behaviour="pass-through">
                <param name="content" value="persName[@type='main']/node()"/>
                <param name="dates" value="(birth, death)"/>
                <pb:template xmlns="" xml:space="preserve"><h3>[[content]] <span class="dates">[[dates]]</span></h3></pb:template>
            </model>
            <model behaviour="block">
                <param name="content" value="persName[@type='variant']"/>
            </model>
            <model behaviour="block">
                <param name="content" value="note"/>
            </model>
            <model predicate="$parameters?mode='register-details'" behaviour="block">
                <desc>List of letters (in register details only)</desc>
                <param name="content" value="let $id := @xml:id return collection($global:data-root)//persName[@key = $id]/ancestor::TEI/teiHeader//titleStmt"/>
                <pb:template xmlns="" xml:space="preserve"><div>
  <h2>Letters</h2>
  [[content]]
</div></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::person or parent::place" behaviour="inline">
            <outputRendition xml:space="preserve" scope="selected">
            content: ': ';
            </outputRendition>
        </model>
                    <model predicate="@target" behaviour="inline"/>
                    <model behaviour="note"/>
                </elementSpec>
        <elementSpec ident="placeName" mode="add">
                    <model output="latex" behaviour="inline">
            <param name="id" value="@key"/>
            <pb:template xmlns="" xml:space="preserve">\glslink{[[id]]}{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: #ef6c00;
            </outputRendition>
        </model>
                    <model predicate="ancestor::correspContext" behaviour="inline">
            <param name="content" value="id(@key, doc($global:register-root || '/places.xml'))/placeName[@type='main']/text()"/>
        </model>
                    <model predicate="$parameters?header='short' or $parameters?mode='breadcrumb'" behaviour="inline"/>
                    <model predicate="$parameters?mode='register'" behaviour="pass-through">
            <param name="default" value="."/>
            <param name="alternate" value="parent::place/note"/>
            <param name="uri" value="$parameters?context-path || '/places/' || parent::place/@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" class="placeName">
  <pb-popover>
    <span slot="default">[[content]]</span>
    <template slot="alternate">[[alternate]]</template>
  </pb-popover>
</a></pb:template>
        </model>
                    <model predicate="parent::place" behaviour="inline"/>
                    <model behaviour="alternate" cssClass="placeName">
            <param name="default" value="."/>
            <param name="alternate" value="id(@key, doc($global:register-root || '/places.xml'))"/>
        </model>
                </elementSpec>
                <elementSpec ident="orgName" mode="add">
                    <model output="print" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: #2e7d32;
            </outputRendition>
        </model>
                    <model predicate="parent::org" behaviour="inline">
            <outputRendition xml:space="preserve" scope="after">
            content: ': ';
            </outputRendition>
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="id(@key, root(.))"/>
            <outputRendition xml:space="preserve">
            color: #2e7d32;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?mode='register-details' and $parameters?static" behaviour="link">
            <param name="uri" value="$parameters?context-path || &#34;/letters/&#34; || util:document-name(.) || '/1/index.html'"/>
            <param name="content" value="string()"/>
        </model>
                    <model predicate="$parameters?mode='register-details'" behaviour="link">
            <param name="content" value="string()"/>
            <param name="uri" value="'..' || substring-after(document-uri(root(.)), $global:data-root)"/>
        </model>
                    <model predicate="parent::titleStmt and $parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="seg" mode="change">
                    <model output="latex" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve">\pstart [[content]] \pend</pb:template>
        </model>
                    <model predicate="@corresp" behaviour="webcomponent" useSourceRendition="true">
            <param name="name" value="'pb-highlight'"/>
            <param name="key" value="replace(@corresp, &#34;^#\w\.(.*)$&#34;, &#34;$1&#34;)"/>
            <param name="highlight-self" value="true()"/>
        </model>
                    <model behaviour="webcomponent" useSourceRendition="true">
            <param name="name" value="'pb-highlight'"/>
            <param name="key" value="replace(@xml:id, &#34;^\w\.(.*)$&#34;, &#34;$1&#34;)"/>
            <param name="highlight-self" value="true()"/>
        </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='register-details'" behaviour="listItem">
            <desc>List of letters in register detail view</desc>
            <param name="content" value="title[not(@level)]"/>
        </model>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model predicate="$parameters?static" behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?context-path || '/' || util:document-name(.) || '/1/index.html'"/>
            </model>
            <model predicate="not($parameters?static)" behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" predicate="$parameters?mode='breadcrumb'" behaviour="inline">
            <param name="content" value="title[not(@type)][not(@level)]"/>
        </model>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <modelSequence predicate="$parameters?mode='map'">
            <model behaviour="heading">
                <param name="content" value="'Places'"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="block">
                <param name="content" value="for $n in root(.)//placeName group by $key := $n/@key order by $key return $n[1]"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='footer-prev'" behaviour="block" cssClass="footer">
            <param name="prev" value="let $next := 'MS' || (xs:int(substring-after(./ancestor::TEI/@xml:id, 'MS')) -1)  let $doc := collection(util:collection-name(.))/id($next)  let $link := if ($doc) then util:collection-name(.) || '/' || util:document-name($doc) else &#34;&#34;  return $link"/>
            <pb:template xmlns="" xml:space="preserve"><paper-button>
              <pb-link path="[[prev]]" emit="transcription" class="part-nav">
                  <iron-icon icon="icons:first-page"/>
                  <pb-i18n key="serafin.navigation.previous">poprzedni</pb-i18n>
              </pb-link>
 </paper-button></pb:template>
        </model>
                    <model predicate="$parameters?mode='footer-next'" behaviour="block" cssClass="footer">
            <param name="next" value="let $next := 'MS' || (1 + xs:int(substring-after(./ancestor::TEI/@xml:id, 'MS')))  let $doc := collection(util:collection-name(.))/id($next)   let $link := if (count($doc)) then util:collection-name(.) || '/' || util:document-name($doc) else &#34;&#34;  return $link"/>
            <pb:template xmlns="" xml:space="preserve"><paper-button>
              <pb-link path="[[next]]" emit="transcription" class="part-nav">
                <pb-i18n key="serafin.navigation.next">następny</pb-i18n>
                <iron-icon icon="icons:last-page"/>
              </pb-link>  
</paper-button></pb:template>
        </model>
                    <model output="latex" behaviour="block">
            <param name="content" value="(fileDesc/titleStmt/title[not(@type)], profileDesc/correspDesc)"/>
            <pb:template xmlns="" xml:space="preserve">\def\volume{[[content]]}</pb:template>
        </model>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="correspAction" mode="add">
                    <model predicate="@type='sent'" behaviour="inline">
            <param name="content" value="(placeName, ', ', date)"/>
            <outputRendition xml:space="preserve" scope="before">
            content: ' — ';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="date" mode="change">
                    <model predicate="$parameters?header='short' or $parameters?mode='breadcrumb'" behaviour="inline"/>
                    <model output="print" predicate="text()" behaviour="inline"/>
                    <model predicate="@when and (not(text()) or text() = '')" behaviour="pass-through">
            <param name="content" value="text { @when }"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="try { format-date(xs:date(@when), '[D1o] [MNn] [Y]', (session:get-attribute('lang'), 'en')[1], (), ()) } catch * { @when/string() }"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="place" mode="add">
                    <model output="latex" behaviour="glossary">
            <param name="name" value="placeName/text()"/>
            <param name="note" value="note"/>
        </model>
                    <model predicate="$parameters?mode='register'" behaviour="listItem">
            <param name="content" value="placeName[@type='main']"/>
            <param name="longitude" value="tokenize(location/geo, ' ')[2]"/>
            <param name="latitude" value="tokenize(location/geo, ' ')[1]"/>
            <param name="label" value="placeName[@type='main']/node()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-geolocation event="mouseover" longitude="[[longitude]]" latitude="[[latitude]]" label="[[label]]" auto="auto" wait-for="#map" zoom="11">[[content]]</pb-geolocation></pb:template>
        </model>
                    <modelSequence>
            <model behaviour="heading">
                <param name="longitude" value="tokenize(location/geo, ' ')[2]"/>
                <param name="latitude" value="tokenize(location/geo, ' ')[1]"/>
                <param name="label" value="placeName[@type='main']/node()"/>
                <param name="content" value="placeName[@type='main']"/>
                <param name="location" value="(country, region)"/>
                <pb:template xmlns="" xml:space="preserve"><pb-geolocation event="click" longitude="[[longitude]]" latitude="[[latitude]]" label="[[label]]" auto="auto" wait-for="#map" subscribe="map" emit="map" zoom="11">[[content]] <small>[[location]]</small></pb-geolocation></pb:template>
            </model>
            <model behaviour="paragraph">
                <param name="content" value="note"/>
            </model>
            <model behaviour="list" cssClass="links">
                <param name="content" value="ptr"/>
            </model>
            <model predicate="$parameters?mode='register-details'" behaviour="block">
                <desc>List of letters (in register details only)</desc>
                <param name="content" value="let $id := @xml:id return collection($global:data-root)//placeName[@key = $id]/ancestor::TEI/teiHeader//titleStmt"/>
                <pb:template xmlns="" xml:space="preserve"><div>
  <h2>Letters</h2>
  [[content]]
</div></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            
            <elementSpec ident="div" mode="change">
                    <model predicate="$parameters?mode = 'register'" behaviour="pass-through">
            <param name="people" value="for $key in distinct-values(root(.)//persName/@key) return collection($global:register-root)/id($key)[self::person]"/>
            <param name="places" value="for $key in distinct-values(root(.)//placeName/@key) return collection($global:register-root)/id($key)[self::place]"/>
            <pb:template xmlns="" xml:space="preserve"><div class="register">
  <h3>People</h3>
  <ul>
    [[people]]
  </ul>

  <h3>Places</h3>
  <ul>
    [[places]]
  </ul>
</div></pb:template>
        </model>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model behaviour="inline" cssClass="birth"/>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model behaviour="inline" cssClass="death"/>
                </elementSpec>
            <elementSpec ident="geo" mode="add"/>
                <elementSpec ident="region" mode="add">
                    <model behaviour="inline" cssClass="region"/>
                </elementSpec>
            <elementSpec ident="country" mode="add">
                    <model behaviour="inline" cssClass="country"/>
                </elementSpec>
                <elementSpec ident="ptr" mode="change">
                    <model predicate="parent::notatedMusic" behaviour="pass-through">
            <desc>Load and display external MEI</desc>
            <param name="url" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><pb-mei url="[[url]]" player="player">
                              <pb-option name="appXPath" on="./rdg[contains(@label, 'original')]" off="">Original Clefs</pb-option>
                              </pb-mei></pb:template>
        </model>
                    <model predicate="parent::place" behaviour="listItem">
            <param name="target" value="@target"/>
            <param name="type" value="@type"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[target]]">[[type]]</a></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="fileDesc" mode="change">
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="editionStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
            </model>
            <model behaviour="block" cssClass="sample-description">
                <desc>Output abstract containing demo description</desc>
                <param name="content" value="../profileDesc/abstract"/>
            </model>
        </modelSequence>
                    <model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model>
                </elementSpec>
            <elementSpec ident="ref" mode="change">
                    <model predicate="$parameters?static and parent::correspContext" behaviour="pass-through">
            <param name="uri" value="$parameters?context-path || '/letters/' || @target || '/1/index.html'"/>
            <param name="icons" value="$parameters?context-path || '/resources/css/icons.svg'"/>
            <param name="type" value="@type"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" data-tooltip="" data-i18n="[data-tooltip]correspondence.[[type]]">
  <svg class="icon">
    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="[[icons]]#[[type]]"/>
  </svg>
</a></pb:template>
        </model>
                    <model predicate="parent::correspContext" behaviour="pass-through">
            <param name="uri" value="$parameters?context-path || '/letters/' || @target"/>
            <param name="icons" value="$parameters?context-path || '/resources/css/icons.svg'"/>
            <param name="type" value="@type"/>
            <param name="content" value="."/>
            <param name="target" value="'letters/' || @target"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover>
  <pb-link slot="default" path="[[target]]" data-tooltip="[[content]]" data-placement="bottom" emit="transcription" subscribe="transcription">
    <svg class="icon">
      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="[[icons]]#[[type]]"/>
    </svg>
  </pb-link>
  <div slot="alternate">[[content]]</div>
</pb-popover></pb:template>
        </model>
                    <model predicate="@target" behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="correspContext" mode="add">
                    <model behaviour="pass-through">
            <param name="previous-in-correspondence" value="ref[@type = 'previous-in-correspondence']"/>
            <param name="previous" value="ref[@type = 'previous']"/>
            <param name="next" value="ref[@type = 'next']"/>
            <param name="next-in-correspondence" value="ref[@type = 'next-in-correspondence']"/>
            <pb:template xmlns="" xml:space="preserve"><ul class="correspContext">
  <li>[[previous]]</li>
  <li>[[previous-in-correspondence]]</li>
  <li>[[next-in-correspondence]]</li>
  <li>[[next]]</li>
</ul></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model behaviour="webcomponent" cssClass="facs">
                        <desc>Use the pb-tify component, no need for explicit link to the image, this is taken care of by the iiif api</desc>
                        <param name="name" value="'pb-facs-link'"/>
                        <param name="content" value="@n"/>
                        <param name="emit" value="'transcription'"/>
                        <param name="order" value="count($get(.)/preceding::pb) + 1"/>
                        <param name="emit-on-load" value="'emit-on-load'"/>
                        <param name="facs" value="'api/iiif/' || substring-after(document-uri(root($parameters?root)), $global:data-root || '/')"/>
                    </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</tei:TEI>